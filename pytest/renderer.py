""" Functions pertaining to rendering a TestResult to various media. """

""" Python library imports """
import termcolor

""" Constant declarations """
APPLICATION_NAME = "pytest"
COLORS = {"normal": "white", "passed": "green", "interrupted": "yellow", "failed": "red"}

""" Renders results to the CLI. """
def to_ansi(results, log=False):
    lines = []
    pass_tally = {"passed": 0, "interrupted": 0, "failed": 0}
    
    # Append header
    lines.append(termcolor.colored(f"Results generated by {APPLICATION_NAME}", COLORS["normal"], attrs=["bold"]))

    for result in results:
        # Test is passed
        if result.passed:
            color = COLORS["passed"]
            pass_tally["passed"] += 1

            if result.description is None:
                lines.append(termcolor.colored(f"{result.name} passed", color))
            else:
                lines.append(termcolor.colored(f"{result.description}", color))
        
        # Test execution failed
        elif result.passed is None:
            color = COLORS["interrupted"]
            pass_tally["interrupted"] += 1

            if result.description is None:
                lines.append(termcolor.colored(f"{result.name} {result.cause}", color))
            else:
                lines.append(termcolor.colored(f"{result.description}", color))
                lines.append(termcolor.colored(f"{result.cause}", color))
        
        # Test is failed
        else:
            color = COLORS["failed"]
            pass_tally["failed"] += 1

            if result.description is None:
                lines.append(termcolor.colored(f"{result.name} failed", color))
            else:
                lines.append(termcolor.colored(f"{result.description}", color))
            
            lines.append(termcolor.colored(f"  {result.cause}", color))
            
        # Check if log is requested
        if log:
            lines.append(termcolor.colored("  execution log:", color))
            lines += [termcolor.colored(f"    {key}: {val}", color) for key, val in sorted(result.log.items())]

    # Append separator
    lines.append("")

    # Append total number of tests
    lines.append(termcolor.colored(f"{len(results)} test(s) ran:", COLORS["normal"]))

    # Append pass tally information
    for status in pass_tally:
        if pass_tally[status] != 0:
            lines.append(termcolor.colored(f"  {pass_tally[status]} test(s) {status}", COLORS[status]))

    return '\n'.join(lines)
